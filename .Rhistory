mean(x)
(8.58 - 9.31) / 0.7511325
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x - 0.44)^2)
sum((x - 0.8)^2)
sum((x - 0.573)^2)
sum((x - 0.36)^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
lm(x ~ y)
install.packages("UsingR")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
install.packages("reshape")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
head(galton)
head(long)
library(swirl)
swirl()
fit <- lm(child~parent, galton)
sum((fit$residuals)^2)/(n-2)
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child  - mu)^2)
sRes <- deviance(galton$child  - mu)
sRes <- deviance(galton$child)
sRes <- deviance(sTot)
sRes <- mean(galton$child)
sRes <- deviance(fit)
(1 - sRes/sTot)
1-sRes/sTot
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality)
all <- lm(Fertility ~ Agriculture + Catholic + Education + Examination +Infant.Mortality)
all <- lm()
all <- lm(Fertility ~ . , data=swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, data=swiss))
cor(Examination, Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, data=swiss)
all - efit
all$coefficients - efit$coefficients
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
fit <- lm(y~x)
summary(fit)
fit$residual
sd(fit$residual)
data(mtcars)
summary(mtcars)
fit <- lm(mpg ~ wt, data=mtcars)
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
mtcars$mpg
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays, 15)
sA
summary(InsectSprays$sp)
summary(InsectSprays[,2])
sapply(InsectSprays, 2, class)
sapply(InsectSprays, 2)
sapply(InsectSprays, class)
lm(count ~ spray, data=InsectSprays)
fit <- lm(count ~ spray, data=InsectSprays)
fit$coef
summary(fit)$coeff
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
fit <- lm(count ~ spray -1 , data=InsectSprays)
nfit <- lm(count ~ spray - 1, InsectSprays)
summary(nfit)$coef
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(count ~ spray, InsectSprays)
fit2 <- lm(count ~ spray2, InsectSprays)
summary(fit2)$coef
mean(sC)
fit$coef[2] - fit$coef[3] / 1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <-lm(Numeric ~ year, hunger[hunger$Sex=="Female"] )
lmF <-lm(Numeric ~ Year, hunger[hunger$Sex=="Female"] )
head(hunger)
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
lmBoth <- lm(Numeric ~ Year + Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which=1)
coeff(fitno) - coeff(fit)
coef(fitno) - coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sd(fit$residual / fit$deviance)
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <- sigma * sqrt(1-hatvalues(fit))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- sqrt(fitno$residual)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]  / (sigma1 * sqrt(1-hatvalues(fit)[1]) )
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
sum(dy^2) / 2*sigma^2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library("UsingR")
data(mtcars)
head(mtcars)
fit <- lm(mpg ~ cyl + wt, mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, mtcars)
summary(fit)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
?qplot
qplot(x, y)
?I
library(swirl)
swirl()
rgp1()
rgp2()
view(swiss)
head(swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education  Catholic, swiss)
mdl <- lm(Fertility ~ Agriculture + Examination + Education + Catholic, swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl <- lm(Fertility ~ Agriculture  + Education + Catholic, swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
simbias()
x1c <- simbias()
apply(x1c, 1, mean)
filt1 <- lm(Fertility ~ Agriculture, swiss)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Examination + Education, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss
)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
( deviance(fit1)-deviance(fit3) ) /2
n <- (deviance(fit1) - deviance(fit3))/2
n / d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6
)
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, family="binomial", ravenData)
lodds <- predict(mdl,data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
view(hits)
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <-
()
mdl2 <- log(lambda/(visits+1))
info
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(datasets)
data(mtcars)
head(mtcars)
names(mtcars)
class(mtcars)
summary(mtcars)
?mtcars
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ disp | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(cyl), data = mtcars,
panel = panel.smooth, rows = 1)
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(hp), data = mtcars,
panel = panel.smooth, rows = 1)
nrow(mtcars)
mtcars
?parirs
?pairs
?coplot
require(graphics)
pairs(mtcars, main = "mtcars data")
coplot(mpg ~ am | as.factor(hp), data = mtcars,
panel = panel.smooth, rows = 1)
lm(mpg ~ am, mtcars)
fit <- lm(mpg ~ am, mtcars)
summary(fit)
fit2 <‐ lm(mpg ~ . ,data=mtcars);
summary(fit2)
fit3 <‐ lm(mpg ~ am + cyl + disp + hp+ drat + wt + qsec + vs + gear + carb ,data=mtcars);
summary(fit3)
vif(fit2)
?vif
??vif
library(car)
vif(fit2)
sqrt(vif(fit2))
cor(mtcars)[1,]
cor(mtcars)
fit0 <- lm(mpg ~ factor(am), mtcars)
fit0$coeff
summary(fit0)$coef
x <‐ c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <‐ c(1.39, 0.72, 1.55, 0.48, 1.19, ‐1.59, 1.23, ‐0.65, 1.49, 0.05)
f <- lm(y ~ x)
coef(f)
?anova
library(datasets)
data(mtcars)
fit1 <- lm(mpg ~ factor(am), mtcars)
summary(fit1)
summary(fit1)$coef
fit2 <- lm(mpg ~ factor(am) + hp, mtcars)
summary(fit2)
summary(fit2)$coef
fit2 <- lm(mpg ~ factor(am) + hp + wt, mtcars)
fit2 <- lm(mpg ~ factor(am) + hp , mtcars)
fit3 <- lm(mpg ~ factor(am) + hp + wt , mtcars)
anova(fit1, fit2, fit3)
vif(fit1)
??vif
library(car)
vif(fit1)
vif(fit2)
vif(fit3)
resid(fit1)
resid(fit2)
resid(fit3)
exit
quit()
library(datasets)
data(mtcars)
#"mpg"  "cyl"  "disp" "hp"   "drat" "wt"   "qsec" "vs"   "am"   "gear" "carb"
class(mtcars)
names(mtcars)
summary(mtcars)
mtcars
fit1 <- lm(mpg ~ factor(am), mtcars)
summary(fit1)
summary(fit1)$coef
fit2 <- lm(mpg ~ factor(am) + hp , mtcars)
summary(fit2)
summary(fit2)$coef
fit3 <- lm(mpg ~ factor(am) + hp + wt , mtcars)
summary(fit3)
summary(fit3)$coef
anova(fit1, fit2, fit3)
vif(fit2)
vif(fit3)
library(car)
vif(fit2)
vif(fit3)
?vif
require(GGally)
require(ggplot2)
library(datasets)
library(car)
data(mtcars)
require(GGally)
require(ggplot2)
require(stats);
require(graphics)
library(datasets)
library(car)
data(mtcars)
pairs(mtcars, panel=panel.smooth, main = "Motor Trends Automobile Data", col=4)
?mtcars
summary(lm(mpg~., data=mtcars))
summary(lm(mpg~., data=mtcars))
help mtcars
help(mtcars)
?pairs
?anova
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
head(diagnosis)
head(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
nrow(diagnosis)
length(diagnosis)
length(predictors)
?createDataPartition
install.packages("caret")
?createDataPartition
??createDataPartition
install.packages("caretEnsemble")
??createDataPartition
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
head(mextures)
head(mixtures)
hist(mistures$Superplasticizer)
?plot
plot(mistures$Superplasticizer, type="h")
plot(mixtures$Superplasticizer, type="h")
plot(log(mixtures$Superplasticizer), type="h")
plot(mixtures$Superplasticizer, type="h")
plot(log(mixtures$Superplasticizer), type="h")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
plot(mixtures$Superplasticizer, type="h")
plot(log(mixtures$Superplasticizer), type="h")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("caretEnsemble")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
names(segmentationOriginal)
summary(segmentationOriginal$Case)
set.seed(125)
train <- subset(segmentationOriginal, Case == "Train")
training <- subset(segmentationOriginal, Case == "Train")
testing <- subset(segmentationOriginal, Case == "Test")
nrow(segmentationOriginal)
nrow(training)
nrow(testing)
library(pgmm)
data(olive)
olive = olive[,-1]
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
head(newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(missClass)
summary(missClass)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
summary(missClass)
missClass
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
summary(vowel.train)
head(vowel.train)
?varImp
varImp(vowel.train)
vowel.train$y <- factor(vowel.train$y)
set.seed(33833)
varImp(vowel.train)
varImp(vowel.train, method="randomForest")
library(caret)
varImp(vowel.train)
varImp.randomForest(vowel.train)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ElemStatLearn")
install.packages("pgmm")
install.packages("rpart")
install.packages("gbm")
install.packages("lubridate")
install.packages("forecast")
install.packages("e1071")
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
set.seed(33833)
fitrf = train(y ~ . , method="rf", data=vowel.train)
fitrf = train(y ~ . , method="rf", data=vowel.train)
summary(fitrf)
fitgbm = train(y ~ . , method="gbm", data=vowel.train)
summary(fitgbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[ inTrain,]
testing <- adData[-inTrain,]
?plot.enet
??plot.enet
install.packages("shiny")
install.packages("shiny")
source("dpq1_1.R")
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
setwd("~/GitHub/MachineLearningAndPrediction")
